<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>wait = true;
ctrl = self;

init();

//citer_step = 1;

step = 0;
draw_every_x_frames = 30; // draw every x frames
done_images = 0;

tests_per_run = 6; // 5 tests + LM classic vs optim
run_number = 2;
total_iterations = tests_per_run * run_number;

//current_computer_name = "thinkpad_AT";//"msiNvidia_ST";
current_computer_name = "msiNvidia_AT";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Execute everything

if ( wait ) {
    
    var real_step  = step / draw_every_x_frames;
    
    //if (step == 30 || step == 60)
    //    show_message("real_step(" + string(real_step) + ")");
    
    if (real_step != floor(real_step)) {
        ++step;
        exit;
    }
    //show_message("should run execute");
    
    var res = run_batch_job(real_step, current_computer_name);
    ++done_images;
    if (res == -1) { // finished drawing
        if (current_computer_name == "msiNvidia_ST") {
            current_computer_name = "msiNvidia_AT";
            step = -1; // will be ++
        } else {
            wait = false;
        } 
    }
    
    ++step;

    /*if ( (citer_step / 10) == floor(citer_step / 10) ) {
        
        
        var res = run_batch_thinkpad_1(floor(citer_step / 10));
        if (res == -1) { // finished drawing
           wait = false; 
        }
    }*/
    //++citer_step;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>external_free(g_dll_name);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_set_font(ft_big_error);
draw_set_color(c_black);
draw_set_alpha(1);
draw_set_halign(fa_left);

if ( wait ) {
    draw_clear(merge_colour(c_white, c_gray, 0.2));
    draw_text(30, 30,
              "step(" + string(step) + ") done_images(" + string(done_images)
              + ") errors(" + string(ds_list_size(g_display_error_list)) + ")");
    exit;
}

var errcount = ds_list_size(g_display_error_list);

    
if (errcount != 0) {
    draw_clear(merge_colour(c_white, c_red, 0.2));
    var xerr = 30;
    var yerr = 30;
    for (var ierr = 0; ierr &lt; errcount; ++ierr) {
        var errstr = ds_list_find_value(g_display_error_list, ierr);
        draw_text(xerr, yerr, errstr);
        yerr += string_height(errstr);
    }
} else {
    draw_clear(merge_colour(c_white, c_green, 0.2));
    draw_text(30, 30, "Programme termin√© sans erreur.");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
