<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>step = 0;

ctrl = self;

init();

//draw_test_qualtiles();
//game_end();

/*var str = "";
for (var i = 0; i &lt; 10; ++i) {
    str += split_thousands(power(10, i)) + chr(10);
}
show_message(str);
game_end();*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (step == 2) repeat (1) {

    var graph_height = g_graph_height;
    var graph_width = g_graph_width;

    load_data_common(g_load_path);
    g_graph_surface = surface_create(g_surface_width, g_surface_height);
    surface_set_target(g_graph_surface);
    draw_clear(c_white);
    draw_some_graph_common();
    surface_reset_target();
    
    //g_save_path_default_base_path = base_dir_save + "sh_save_surf_h" + h_version;
    ///g_save_path_extension = ".png";
    //MAJ dans load_data_common
    
    if ( ! g_debug_fast_load ) {
        
        var max_trials = 300;
        var fpath = "";
        for (var i = 0; i &lt; max_trials; ++i) {
            if (i == 0) {
                fpath = g_save_path_default_base_path + g_save_path_extension;
            } else {
                var istr = string(i);
                var nblen = 3;
                var fill_count = nblen - string_length(istr);
                for (var ti = 0; ti &lt; fill_count; ++ti) {
                    istr = "0" + istr; // dirtyyy
                }
                fpath = g_save_path_default_base_path + "_" + istr + g_save_path_extension;
            }
            if ( ! dFileExists(fpath) ) break;
        }
        //show_message("fpath= " + fpath + chr(10) + " exists = " + string(dFileExists(fpath)));
        //get_save_filename("", fpath);
        //show_message("fpath= " + fpath + chr(10) + " exists = " + string(dFileExists(fpath)));
        
        surface_save(g_graph_surface, get_save_filename("", fpath));
        //surface_free(s);
    }
}

++step;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>external_free(g_dll_name);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (step &lt; 3) exit;

if (surface_exists(g_graph_surface)) {
    draw_surface(g_graph_surface, 0, 0);
}

//draw_some_graph_2();
//draw_test_graph();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
